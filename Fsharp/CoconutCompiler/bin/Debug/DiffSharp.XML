<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>CoconutCompiler</name></assembly>
<members>
<member name="M:corelang.vectorAllocCPS(System.Int32,Microsoft.FSharp.Core.FSharpFunc{types.Storage,Microsoft.FSharp.Core.Unit})">
<summary>
 Allocates storage needed for a Vector. 
 This storage is available only in the `cont` scope.
</summary>
</member>
<member name="M:rules.letMerging(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 The composition of this rule, let introduction, and letFloatOutwards results in 
 common-subexpression elimination (CSE).
</summary>
</member>
<member name="M:rules.methodDefInliner(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 This rule is composition of one application of methodDefToLambda and lambdaAppToLet followed
 by several applications of letInliner.
</summary>
</member>
<member name="M:rules.betaReduction(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 This rule is composition of one application of lambdaAppToLet and several applications of letInliner
</summary>
</member>
</members>
</doc>
