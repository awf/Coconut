#ifndef __USECASES_BA_D_H__ 
#define __USECASES_BA_D_H__ 
#include "../../Runtime/C/fsharp.h"
#include <stdio.h>
#include <math.h>

number_t TOP_LEVEL_linalg_sqnorm(array_number_t v) {
	number_t macroDef26 = 0;
	for(int cur_idx = 0; cur_idx < v->length; cur_idx++){
		number_t cur = v->arr[cur_idx];
		
		macroDef26 = (macroDef26) + (cur*cur);;
	}
	return macroDef26;
}

array_number_t TOP_LEVEL_usecases_ba_project_d(array_number_t cam, array_number_t x, array_number_t cam_d, array_number_t x_d) {
	number_t _x1540 = cam->arr[2];
	number_t _x1542 = cam_d->arr[2];
	number_t _x1544 = (_x1540) * (_x1540);
	number_t _x1547 = (_x1542) * (_x1540);
	number_t _x1548 = (_x1540) * (_x1542);
	number_t _x1546 = (_x1547) + (_x1548);
	number_t _x1550 = cam->arr[1];
	number_t _x1552 = cam_d->arr[1];
	number_t _x1554 = (_x1550) * (_x1550);
	number_t _x1557 = (_x1552) * (_x1550);
	number_t _x1558 = (_x1550) * (_x1552);
	number_t _x1556 = (_x1557) + (_x1558);
	number_t _x1560 = cam->arr[0];
	number_t _x1562 = cam_d->arr[0];
	number_t _x1564 = (_x1560) * (_x1560);
	number_t _x1567 = (_x1562) * (_x1560);
	number_t _x1568 = (_x1560) * (_x1562);
	number_t _x1566 = (_x1567) + (_x1568);
	number_t _x1570 = (0) + (_x1564);
	number_t _x1572 = (0) + (_x1566);
	number_t _x1574 = (_x1570) + (_x1554);
	number_t _x1576 = (_x1572) + (_x1556);
	number_t _x1578 = (_x1574) + (_x1544);
	number_t _x1580 = (_x1576) + (_x1546);
	bool_t _x1582 = (_x1578) != (0);
	tuple_array_number_t_array_number_t _x1584;
	if(_x1582) {
		number_t _x1587 = sqrt(_x1578);
		number_t _x1589 = cos(_x1587);
		number_t _x1591 = sin(_x1587);
		number_t _x1593 = (1) / (_x1587);
		number_t _x1597 = (_x1550) * (_x1593);
		number_t _x1599 = x->arr[2];
		number_t _x1601 = cam->arr[5];
		number_t _x1603 = (_x1599) - (_x1601);
		number_t _x1605 = (_x1597) * (_x1603);
		number_t _x1609 = (_x1540) * (_x1593);
		number_t _x1611 = x->arr[1];
		number_t _x1613 = cam->arr[4];
		number_t _x1615 = (_x1611) - (_x1613);
		number_t _x1617 = (_x1609) * (_x1615);
		number_t _x1619 = (_x1605) - (_x1617);
		number_t _x1625 = x->arr[0];
		number_t _x1627 = cam->arr[3];
		number_t _x1629 = (_x1625) - (_x1627);
		number_t _x1631 = (_x1609) * (_x1629);
		number_t _x1635 = (_x1560) * (_x1593);
		number_t _x1643 = (_x1635) * (_x1603);
		number_t _x1645 = (_x1631) - (_x1643);
		number_t _x1657 = (_x1635) * (_x1615);
		number_t _x1669 = (_x1597) * (_x1629);
		number_t _x1671 = (_x1657) - (_x1669);
		array_number_t _x1673 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x1673->length=3;
	_x1673->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x1673->arr[0] = _x1619;
	_x1673->arr[1] = _x1645;
	_x1673->arr[2] = _x1671;;
		number_t _x1686 = (_x1609) * (_x1603);
		number_t _x1699 = (_x1597) * (_x1615);
		number_t _x1712 = (_x1635) * (_x1629);
		number_t _x1714 = (0) + (_x1712);
		number_t _x1716 = (_x1714) + (_x1699);
		number_t _x1718 = (_x1716) + (_x1686);
		number_t _x1720 = (1) - (_x1589);
		number_t _x1722 = (_x1718) * (_x1720);
		card_t macroDef2464 = x->length;
		card_t _x1724 = macroDef2464;
		array_number_t macroDef2465 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2465->length=_x1724;
	macroDef2465->arr = (number_t*)storage_alloc(sizeof(number_t) * _x1724);
		for(int i = 0; i < macroDef2465->length; i++){
			number_t _x1727 = x->arr[i];
			index_t _x1729 = (i) + (3);
			number_t _x1731 = cam->arr[_x1729];
			number_t _x1733 = (_x1727) - (_x1731);
			number_t _x1735 = (_x1733) * (_x1589);
			number_t _x1737 = _x1673->arr[i];
			number_t _x1739 = (_x1737) * (_x1591);
			number_t _x1741 = (_x1735) + (_x1739);
			number_t _x1743 = cam->arr[i];
			number_t _x1745 = (_x1743) * (_x1593);
			number_t _x1747 = (_x1745) * (_x1722);
			number_t _x1749 = (_x1741) + (_x1747);
			macroDef2465->arr[i] = _x1749;;
		}
		array_number_t _x1725 = macroDef2465;
		number_t _x1754 = (2) * (_x1587);
		number_t _x1753 = (_x1580) / (_x1754);
		number_t _x1760 = -(_x1591);
		number_t _x1759 = (_x1753) * (_x1760);
		number_t _x1765 = (_x1753) * (_x1589);
		number_t _x1772 = (0) * (_x1587);
		number_t _x1773 = (1) * (_x1753);
		number_t _x1771 = (_x1772) - (_x1773);
		number_t _x1774 = (_x1587) * (_x1587);
		number_t _x1770 = (_x1771) / (_x1774);
		number_t _x1783 = (_x1552) * (_x1593);
		number_t _x1784 = (_x1550) * (_x1770);
		number_t _x1782 = (_x1783) + (_x1784);
		number_t _x1788 = x_d->arr[2];
		number_t _x1792 = cam_d->arr[5];
		number_t _x1796 = (_x1788) - (_x1792);
		number_t _x1801 = (_x1782) * (_x1603);
		number_t _x1802 = (_x1597) * (_x1796);
		number_t _x1800 = (_x1801) + (_x1802);
		number_t _x1811 = (_x1542) * (_x1593);
		number_t _x1812 = (_x1540) * (_x1770);
		number_t _x1810 = (_x1811) + (_x1812);
		number_t _x1816 = x_d->arr[1];
		number_t _x1820 = cam_d->arr[4];
		number_t _x1824 = (_x1816) - (_x1820);
		number_t _x1829 = (_x1810) * (_x1615);
		number_t _x1830 = (_x1609) * (_x1824);
		number_t _x1828 = (_x1829) + (_x1830);
		number_t _x1834 = (_x1800) - (_x1828);
		number_t _x1848 = x_d->arr[0];
		number_t _x1852 = cam_d->arr[3];
		number_t _x1856 = (_x1848) - (_x1852);
		number_t _x1861 = (_x1810) * (_x1629);
		number_t _x1862 = (_x1609) * (_x1856);
		number_t _x1860 = (_x1861) + (_x1862);
		number_t _x1871 = (_x1562) * (_x1593);
		number_t _x1872 = (_x1560) * (_x1770);
		number_t _x1870 = (_x1871) + (_x1872);
		number_t _x1889 = (_x1870) * (_x1603);
		number_t _x1890 = (_x1635) * (_x1796);
		number_t _x1888 = (_x1889) + (_x1890);
		number_t _x1894 = (_x1860) - (_x1888);
		number_t _x1921 = (_x1870) * (_x1615);
		number_t _x1922 = (_x1635) * (_x1824);
		number_t _x1920 = (_x1921) + (_x1922);
		number_t _x1949 = (_x1782) * (_x1629);
		number_t _x1950 = (_x1597) * (_x1856);
		number_t _x1948 = (_x1949) + (_x1950);
		number_t _x1954 = (_x1920) - (_x1948);
		array_number_t _x1958 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x1958->length=3;
	_x1958->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x1958->arr[0] = _x1834;
	_x1958->arr[1] = _x1894;
	_x1958->arr[2] = _x1954;;
		number_t _x1986 = (_x1810) * (_x1603);
		number_t _x1987 = (_x1609) * (_x1796);
		number_t _x1985 = (_x1986) + (_x1987);
		number_t _x2015 = (_x1782) * (_x1615);
		number_t _x2016 = (_x1597) * (_x1824);
		number_t _x2014 = (_x2015) + (_x2016);
		number_t _x2044 = (_x1870) * (_x1629);
		number_t _x2045 = (_x1635) * (_x1856);
		number_t _x2043 = (_x2044) + (_x2045);
		number_t _x2049 = (0) + (_x2043);
		number_t _x2053 = (_x2049) + (_x2014);
		number_t _x2057 = (_x2053) + (_x1985);
		number_t _x2061 = (0) - (_x1759);
		number_t _x2066 = (_x2057) * (_x1720);
		number_t _x2067 = (_x1718) * (_x2061);
		number_t _x2065 = (_x2066) + (_x2067);
		array_number_t macroDef2466 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2466->length=_x1724;
	macroDef2466->arr = (number_t*)storage_alloc(sizeof(number_t) * _x1724);
		for(int i = 0; i < macroDef2466->length; i++){
			number_t _x2072 = x->arr[i];
			number_t _x2074 = x_d->arr[i];
			index_t _x2076 = (i) + (3);
			number_t _x2078 = cam->arr[_x2076];
			number_t _x2080 = cam_d->arr[_x2076];
			number_t _x2082 = (_x2072) - (_x2078);
			number_t _x2084 = (_x2074) - (_x2080);
			number_t _x2087 = (_x2084) * (_x1589);
			number_t _x2088 = (_x2082) * (_x1759);
			number_t _x2086 = (_x2087) + (_x2088);
			number_t _x2090 = _x1673->arr[i];
			number_t _x2092 = _x1958->arr[i];
			number_t _x2095 = (_x2092) * (_x1591);
			number_t _x2096 = (_x2090) * (_x1765);
			number_t _x2094 = (_x2095) + (_x2096);
			number_t _x2098 = (_x2086) + (_x2094);
			number_t _x2100 = cam->arr[i];
			number_t _x2102 = cam_d->arr[i];
			number_t _x2104 = (_x2100) * (_x1593);
			number_t _x2107 = (_x2102) * (_x1593);
			number_t _x2108 = (_x2100) * (_x1770);
			number_t _x2106 = (_x2107) + (_x2108);
			number_t _x2111 = (_x2106) * (_x1722);
			number_t _x2112 = (_x2104) * (_x2065);
			number_t _x2110 = (_x2111) + (_x2112);
			number_t _x2114 = (_x2098) + (_x2110);
			macroDef2466->arr[i] = _x2114;;
		}
		array_number_t _x2070 = macroDef2466;
		tuple_array_number_t_array_number_t _x1585 = pair_v_v(_x1725, _x2070);
		_x1584 = _x1585;;
	} else {
		number_t _x2119 = x->arr[2];
		number_t _x2121 = cam->arr[5];
		number_t _x2123 = (_x2119) - (_x2121);
		number_t _x2125 = (_x1550) * (_x2123);
		number_t _x2129 = x->arr[1];
		number_t _x2131 = cam->arr[4];
		number_t _x2133 = (_x2129) - (_x2131);
		number_t _x2135 = (_x1540) * (_x2133);
		number_t _x2137 = (_x2125) - (_x2135);
		number_t _x2141 = x->arr[0];
		number_t _x2143 = cam->arr[3];
		number_t _x2145 = (_x2141) - (_x2143);
		number_t _x2147 = (_x1540) * (_x2145);
		number_t _x2157 = (_x1560) * (_x2123);
		number_t _x2159 = (_x2147) - (_x2157);
		number_t _x2169 = (_x1560) * (_x2133);
		number_t _x2179 = (_x1550) * (_x2145);
		number_t _x2181 = (_x2169) - (_x2179);
		array_number_t _x2183 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x2183->length=3;
	_x2183->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x2183->arr[0] = _x2137;
	_x2183->arr[1] = _x2159;
	_x2183->arr[2] = _x2181;;
		card_t macroDef2467 = x->length;
		card_t _x2185 = macroDef2467;
		array_number_t macroDef2468 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2468->length=_x2185;
	macroDef2468->arr = (number_t*)storage_alloc(sizeof(number_t) * _x2185);
		for(int i = 0; i < macroDef2468->length; i++){
			number_t _x2188 = x->arr[i];
			index_t _x2190 = (i) + (3);
			number_t _x2192 = cam->arr[_x2190];
			number_t _x2194 = (_x2188) - (_x2192);
			number_t _x2196 = _x2183->arr[i];
			number_t _x2198 = (_x2194) + (_x2196);
			macroDef2468->arr[i] = _x2198;;
		}
		array_number_t _x2186 = macroDef2468;
		number_t _x2206 = x_d->arr[2];
		number_t _x2210 = cam_d->arr[5];
		number_t _x2214 = (_x2206) - (_x2210);
		number_t _x2217 = (_x1552) * (_x2123);
		number_t _x2218 = (_x1550) * (_x2214);
		number_t _x2216 = (_x2217) + (_x2218);
		number_t _x2226 = x_d->arr[1];
		number_t _x2230 = cam_d->arr[4];
		number_t _x2234 = (_x2226) - (_x2230);
		number_t _x2237 = (_x1542) * (_x2133);
		number_t _x2238 = (_x1540) * (_x2234);
		number_t _x2236 = (_x2237) + (_x2238);
		number_t _x2240 = (_x2216) - (_x2236);
		number_t _x2248 = x_d->arr[0];
		number_t _x2252 = cam_d->arr[3];
		number_t _x2256 = (_x2248) - (_x2252);
		number_t _x2259 = (_x1542) * (_x2145);
		number_t _x2260 = (_x1540) * (_x2256);
		number_t _x2258 = (_x2259) + (_x2260);
		number_t _x2279 = (_x1562) * (_x2123);
		number_t _x2280 = (_x1560) * (_x2214);
		number_t _x2278 = (_x2279) + (_x2280);
		number_t _x2282 = (_x2258) - (_x2278);
		number_t _x2301 = (_x1562) * (_x2133);
		number_t _x2302 = (_x1560) * (_x2234);
		number_t _x2300 = (_x2301) + (_x2302);
		number_t _x2321 = (_x1552) * (_x2145);
		number_t _x2322 = (_x1550) * (_x2256);
		number_t _x2320 = (_x2321) + (_x2322);
		number_t _x2324 = (_x2300) - (_x2320);
		array_number_t _x2326 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x2326->length=3;
	_x2326->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x2326->arr[0] = _x2240;
	_x2326->arr[1] = _x2282;
	_x2326->arr[2] = _x2324;;
		array_number_t macroDef2469 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2469->length=_x2185;
	macroDef2469->arr = (number_t*)storage_alloc(sizeof(number_t) * _x2185);
		for(int i = 0; i < macroDef2469->length; i++){
			number_t _x2331 = x_d->arr[i];
			index_t _x2333 = (i) + (3);
			number_t _x2335 = cam_d->arr[_x2333];
			number_t _x2337 = (_x2331) - (_x2335);
			number_t _x2339 = _x2326->arr[i];
			number_t _x2341 = (_x2337) + (_x2339);
			macroDef2469->arr[i] = _x2341;;
		}
		array_number_t _x2329 = macroDef2469;
		tuple_array_number_t_array_number_t _x2115 = pair_v_v(_x2186, _x2329);
		_x1584 = _x2115;;
	}
	array_number_t _x2343 = _x1584._1;
	array_number_t _x2345 = _x1584._2;
	number_t _x2347 = _x2343->arr[2];
	number_t _x2349 = _x2345->arr[2];
	number_t _x2351 = (1) / (_x2347);
	number_t _x2355 = (0) * (_x2347);
	number_t _x2356 = (1) * (_x2349);
	number_t _x2354 = (_x2355) - (_x2356);
	number_t _x2357 = (_x2347) * (_x2347);
	number_t _x2353 = (_x2354) / (_x2357);
	number_t _x2359 = _x2343->arr[1];
	number_t _x2361 = _x2345->arr[1];
	number_t _x2363 = (_x2359) * (_x2351);
	number_t _x2366 = (_x2361) * (_x2351);
	number_t _x2367 = (_x2359) * (_x2353);
	number_t _x2365 = (_x2366) + (_x2367);
	number_t _x2369 = (_x2363) * (_x2363);
	number_t _x2372 = (_x2365) * (_x2363);
	number_t _x2373 = (_x2363) * (_x2365);
	number_t _x2371 = (_x2372) + (_x2373);
	number_t _x2375 = _x2343->arr[0];
	number_t _x2377 = _x2345->arr[0];
	number_t _x2379 = (_x2375) * (_x2351);
	number_t _x2382 = (_x2377) * (_x2351);
	number_t _x2383 = (_x2375) * (_x2353);
	number_t _x2381 = (_x2382) + (_x2383);
	number_t _x2385 = (_x2379) * (_x2379);
	number_t _x2388 = (_x2381) * (_x2379);
	number_t _x2389 = (_x2379) * (_x2381);
	number_t _x2387 = (_x2388) + (_x2389);
	number_t _x2391 = (0) + (_x2385);
	number_t _x2393 = (0) + (_x2387);
	number_t _x2395 = (_x2391) + (_x2369);
	number_t _x2397 = (_x2393) + (_x2371);
	number_t _x2399 = cam->arr[9];
	number_t _x2401 = cam_d->arr[9];
	number_t _x2403 = (_x2399) * (_x2395);
	number_t _x2406 = (_x2401) * (_x2395);
	number_t _x2407 = (_x2399) * (_x2397);
	number_t _x2405 = (_x2406) + (_x2407);
	number_t _x2409 = (1) + (_x2403);
	number_t _x2411 = (0) + (_x2405);
	number_t _x2413 = cam->arr[10];
	number_t _x2415 = cam_d->arr[10];
	number_t _x2417 = (_x2413) * (_x2395);
	number_t _x2420 = (_x2415) * (_x2395);
	number_t _x2421 = (_x2413) * (_x2397);
	number_t _x2419 = (_x2420) + (_x2421);
	number_t _x2423 = (_x2417) * (_x2395);
	number_t _x2426 = (_x2419) * (_x2395);
	number_t _x2427 = (_x2417) * (_x2397);
	number_t _x2425 = (_x2426) + (_x2427);
	number_t _x2429 = (_x2409) + (_x2423);
	number_t _x2431 = (_x2411) + (_x2425);
	number_t _x2433 = cam->arr[6];
	number_t _x2435 = cam_d->arr[6];
	array_number_t macroDef2470 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2470->length=2;
	macroDef2470->arr = (number_t*)storage_alloc(sizeof(number_t) * 2);
		for(int i = 0; i < macroDef2470->length; i++){
			index_t _x2439 = (i) + (7);
			number_t _x2441 = cam_d->arr[_x2439];
			number_t _x2443 = _x2343->arr[i];
			number_t _x2445 = _x2345->arr[i];
			number_t _x2447 = (_x2443) * (_x2351);
			number_t _x2450 = (_x2445) * (_x2351);
			number_t _x2451 = (_x2443) * (_x2353);
			number_t _x2449 = (_x2450) + (_x2451);
			number_t _x2453 = (_x2447) * (_x2429);
			number_t _x2456 = (_x2449) * (_x2429);
			number_t _x2457 = (_x2447) * (_x2431);
			number_t _x2455 = (_x2456) + (_x2457);
			number_t _x2460 = (_x2455) * (_x2433);
			number_t _x2461 = (_x2453) * (_x2435);
			number_t _x2459 = (_x2460) + (_x2461);
			number_t _x2463 = (_x2441) + (_x2459);
			macroDef2470->arr[i] = _x2463;;
		}
	array_number_t _x2436 = macroDef2470;
	return _x2436;
}

#endif