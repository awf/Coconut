#ifndef __USECASES_BA_D_H__ 
#define __USECASES_BA_D_H__ 
#include "../../Runtime/C/fsharp.h"
#include <stdio.h>
#include <math.h>

number_t TOP_LEVEL_linalg_sqnorm(array_number_t v) {
	number_t macroDef26 = 0;
	for(int cur_idx = 0; cur_idx < v->length; cur_idx++){
		number_t cur = v->arr[cur_idx];
		
		macroDef26 = (macroDef26) + (cur*cur);;
	}
	return macroDef26;
}

array_number_t TOP_LEVEL_usecases_ba_project_d(array_number_t cam, array_number_t x, array_number_t cam_d, array_number_t x_d) {
	card_t _x1513 = 3;
	card_t _x1515 = 0;
	tuple_number_t_number_t _x1539 = pair(0, 0);
	tuple_number_t_number_t macroDef2364 = _x1539;
	for(int idx = _x1515; idx < _x1513; idx++){
		number_t _x1519 = macroDef2364._1;
		number_t _x1521 = macroDef2364._2;
		number_t _x1524 = cam->arr[idx];
		number_t _x1526 = (_x1524) * (_x1524);
		number_t _x1528 = (_x1519) + (_x1526);
		number_t _x1532 = cam_d->arr[idx];
		number_t _x1535 = (_x1532) * (_x1524);
		number_t _x1536 = (_x1524) * (_x1532);
		number_t _x1534 = (_x1535) + (_x1536);
		number_t _x1538 = (_x1521) + (_x1534);
		tuple_number_t_number_t _x1522 = pair(_x1528, _x1538);
		macroDef2364 = _x1522;;
	}
	tuple_number_t_number_t _x1517 = macroDef2364;
	number_t _x1541 = _x1517._1;
	number_t _x1543 = _x1517._2;
	bool_t _x1545 = (_x1541) != (0);
	array_number_t _x1547 = 0;
	if(_x1545) {
		number_t _x1549 = sqrt(_x1541);
		number_t _x1551 = cos(_x1549);
		number_t _x1553 = sin(_x1549);
		number_t _x1555 = (1) / (_x1549);
		number_t _x1557 = cam->arr[1];
		number_t _x1559 = (_x1557) * (_x1555);
		number_t _x1561 = x->arr[2];
		number_t _x1563 = cam->arr[5];
		number_t _x1565 = (_x1561) - (_x1563);
		number_t _x1567 = (_x1559) * (_x1565);
		number_t _x1569 = cam->arr[2];
		number_t _x1571 = (_x1569) * (_x1555);
		number_t _x1573 = x->arr[1];
		number_t _x1575 = cam->arr[4];
		number_t _x1577 = (_x1573) - (_x1575);
		number_t _x1579 = (_x1571) * (_x1577);
		number_t _x1581 = (_x1567) - (_x1579);
		number_t _x1587 = x->arr[0];
		number_t _x1589 = cam->arr[3];
		number_t _x1591 = (_x1587) - (_x1589);
		number_t _x1593 = (_x1571) * (_x1591);
		number_t _x1595 = cam->arr[0];
		number_t _x1597 = (_x1595) * (_x1555);
		number_t _x1599 = x->arr[2];
		number_t _x1603 = (_x1599) - (_x1563);
		number_t _x1605 = (_x1597) * (_x1603);
		number_t _x1607 = (_x1593) - (_x1605);
		number_t _x1613 = x->arr[1];
		number_t _x1617 = (_x1613) - (_x1575);
		number_t _x1619 = (_x1597) * (_x1617);
		number_t _x1625 = x->arr[0];
		number_t _x1629 = (_x1625) - (_x1589);
		number_t _x1631 = (_x1559) * (_x1629);
		number_t _x1633 = (_x1619) - (_x1631);
		array_number_t _x1635 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x1635->length=3;
	_x1635->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x1635->arr[0] = _x1581;
	_x1635->arr[1] = _x1607;
	_x1635->arr[2] = _x1633;;
		number_t macroDef2365 = 0;
	for(int idx = _x1515; idx < _x1513; idx++){
		number_t _x1643 = cam->arr[idx];
		number_t _x1645 = (_x1643) * (_x1555);
		number_t _x1647 = x->arr[idx];
		index_t _x1649 = (idx) + (3);
		number_t _x1651 = cam->arr[_x1649];
		number_t _x1653 = (_x1647) - (_x1651);
		number_t _x1655 = (_x1645) * (_x1653);
		number_t _x1657 = (macroDef2365) + (_x1655);
		macroDef2365 = _x1657;;
	}
		number_t _x1641 = macroDef2365;
		number_t _x1659 = (1) - (_x1551);
		number_t _x1661 = (_x1641) * (_x1659);
		card_t macroDef2366 = x->length;
		card_t _x1663 = macroDef2366;
		array_number_t macroDef2367 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2367->length=_x1663;
	macroDef2367->arr = (number_t*)storage_alloc(sizeof(number_t) * _x1663);
		for(int i = 0; i < macroDef2367->length; i++){
			number_t _x1666 = x->arr[i];
			index_t _x1668 = (i) + (3);
			number_t _x1670 = cam->arr[_x1668];
			number_t _x1672 = (_x1666) - (_x1670);
			number_t _x1674 = (_x1672) * (_x1551);
			number_t _x1676 = _x1635->arr[i];
			number_t _x1678 = (_x1676) * (_x1553);
			number_t _x1680 = (_x1674) + (_x1678);
			number_t _x1682 = cam->arr[i];
			number_t _x1684 = (_x1682) * (_x1555);
			number_t _x1686 = (_x1684) * (_x1661);
			number_t _x1688 = (_x1680) + (_x1686);
			macroDef2367->arr[i] = _x1688;;
		}
		array_number_t _x1664 = macroDef2367;
		_x1547 = _x1664;;
	} else {
		number_t _x1690 = cam->arr[1];
		number_t _x1692 = x->arr[2];
		number_t _x1694 = cam->arr[5];
		number_t _x1696 = (_x1692) - (_x1694);
		number_t _x1698 = (_x1690) * (_x1696);
		number_t _x1700 = cam->arr[2];
		number_t _x1702 = x->arr[1];
		number_t _x1704 = cam->arr[4];
		number_t _x1706 = (_x1702) - (_x1704);
		number_t _x1708 = (_x1700) * (_x1706);
		number_t _x1710 = (_x1698) - (_x1708);
		number_t _x1714 = x->arr[0];
		number_t _x1716 = cam->arr[3];
		number_t _x1718 = (_x1714) - (_x1716);
		number_t _x1720 = (_x1700) * (_x1718);
		number_t _x1722 = cam->arr[0];
		number_t _x1724 = x->arr[2];
		number_t _x1728 = (_x1724) - (_x1694);
		number_t _x1730 = (_x1722) * (_x1728);
		number_t _x1732 = (_x1720) - (_x1730);
		number_t _x1736 = x->arr[1];
		number_t _x1740 = (_x1736) - (_x1704);
		number_t _x1742 = (_x1722) * (_x1740);
		number_t _x1746 = x->arr[0];
		number_t _x1750 = (_x1746) - (_x1716);
		number_t _x1752 = (_x1690) * (_x1750);
		number_t _x1754 = (_x1742) - (_x1752);
		array_number_t _x1756 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x1756->length=3;
	_x1756->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x1756->arr[0] = _x1710;
	_x1756->arr[1] = _x1732;
	_x1756->arr[2] = _x1754;;
		card_t macroDef2368 = x->length;
		card_t _x1758 = macroDef2368;
		array_number_t macroDef2369 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2369->length=_x1758;
	macroDef2369->arr = (number_t*)storage_alloc(sizeof(number_t) * _x1758);
		for(int i = 0; i < macroDef2369->length; i++){
			number_t _x1761 = x->arr[i];
			index_t _x1763 = (i) + (3);
			number_t _x1765 = cam->arr[_x1763];
			number_t _x1767 = (_x1761) - (_x1765);
			number_t _x1769 = _x1756->arr[i];
			number_t _x1771 = (_x1767) + (_x1769);
			macroDef2369->arr[i] = _x1771;;
		}
		array_number_t _x1759 = macroDef2369;
		_x1547 = _x1759;;
	}
	array_number_t _x1773 = 0;
	if(_x1545) {
		number_t _x1775 = sqrt(_x1541);
		number_t _x1778 = (2) * (_x1775);
		number_t _x1777 = (_x1543) / (_x1778);
		number_t _x1781 = cos(_x1775);
		number_t _x1785 = sin(_x1775);
		number_t _x1784 = -(_x1785);
		number_t _x1783 = (_x1777) * (_x1784);
		number_t _x1789 = (_x1777) * (_x1781);
		number_t _x1792 = (1) / (_x1775);
		number_t _x1796 = (0) * (_x1775);
		number_t _x1797 = (1) * (_x1777);
		number_t _x1795 = (_x1796) - (_x1797);
		number_t _x1798 = (_x1775) * (_x1775);
		number_t _x1794 = (_x1795) / (_x1798);
		number_t _x1800 = cam->arr[1];
		number_t _x1802 = cam_d->arr[1];
		number_t _x1804 = (_x1800) * (_x1792);
		number_t _x1807 = (_x1802) * (_x1792);
		number_t _x1808 = (_x1800) * (_x1794);
		number_t _x1806 = (_x1807) + (_x1808);
		number_t _x1810 = x->arr[2];
		number_t _x1812 = x_d->arr[2];
		number_t _x1814 = cam->arr[5];
		number_t _x1816 = cam_d->arr[5];
		number_t _x1818 = (_x1810) - (_x1814);
		number_t _x1820 = (_x1812) - (_x1816);
		number_t _x1822 = (_x1804) * (_x1818);
		number_t _x1825 = (_x1806) * (_x1818);
		number_t _x1826 = (_x1804) * (_x1820);
		number_t _x1824 = (_x1825) + (_x1826);
		number_t _x1828 = cam->arr[2];
		number_t _x1830 = cam_d->arr[2];
		number_t _x1832 = (_x1828) * (_x1792);
		number_t _x1835 = (_x1830) * (_x1792);
		number_t _x1836 = (_x1828) * (_x1794);
		number_t _x1834 = (_x1835) + (_x1836);
		number_t _x1838 = x->arr[1];
		number_t _x1840 = x_d->arr[1];
		number_t _x1842 = cam->arr[4];
		number_t _x1844 = cam_d->arr[4];
		number_t _x1846 = (_x1838) - (_x1842);
		number_t _x1848 = (_x1840) - (_x1844);
		number_t _x1850 = (_x1832) * (_x1846);
		number_t _x1853 = (_x1834) * (_x1846);
		number_t _x1854 = (_x1832) * (_x1848);
		number_t _x1852 = (_x1853) + (_x1854);
		number_t _x1856 = (_x1822) - (_x1850);
		number_t _x1858 = (_x1824) - (_x1852);
		number_t _x1870 = x->arr[0];
		number_t _x1872 = x_d->arr[0];
		number_t _x1874 = cam->arr[3];
		number_t _x1876 = cam_d->arr[3];
		number_t _x1878 = (_x1870) - (_x1874);
		number_t _x1880 = (_x1872) - (_x1876);
		number_t _x1882 = (_x1832) * (_x1878);
		number_t _x1885 = (_x1834) * (_x1878);
		number_t _x1886 = (_x1832) * (_x1880);
		number_t _x1884 = (_x1885) + (_x1886);
		number_t _x1888 = cam->arr[0];
		number_t _x1890 = cam_d->arr[0];
		number_t _x1892 = (_x1888) * (_x1792);
		number_t _x1895 = (_x1890) * (_x1792);
		number_t _x1896 = (_x1888) * (_x1794);
		number_t _x1894 = (_x1895) + (_x1896);
		number_t _x1898 = x->arr[2];
		number_t _x1900 = x_d->arr[2];
		number_t _x1906 = (_x1898) - (_x1814);
		number_t _x1908 = (_x1900) - (_x1816);
		number_t _x1910 = (_x1892) * (_x1906);
		number_t _x1913 = (_x1894) * (_x1906);
		number_t _x1914 = (_x1892) * (_x1908);
		number_t _x1912 = (_x1913) + (_x1914);
		number_t _x1916 = (_x1882) - (_x1910);
		number_t _x1918 = (_x1884) - (_x1912);
		number_t _x1930 = x->arr[1];
		number_t _x1932 = x_d->arr[1];
		number_t _x1938 = (_x1930) - (_x1842);
		number_t _x1940 = (_x1932) - (_x1844);
		number_t _x1942 = (_x1892) * (_x1938);
		number_t _x1945 = (_x1894) * (_x1938);
		number_t _x1946 = (_x1892) * (_x1940);
		number_t _x1944 = (_x1945) + (_x1946);
		number_t _x1958 = x->arr[0];
		number_t _x1960 = x_d->arr[0];
		number_t _x1966 = (_x1958) - (_x1874);
		number_t _x1968 = (_x1960) - (_x1876);
		number_t _x1970 = (_x1804) * (_x1966);
		number_t _x1973 = (_x1806) * (_x1966);
		number_t _x1974 = (_x1804) * (_x1968);
		number_t _x1972 = (_x1973) + (_x1974);
		number_t _x1976 = (_x1942) - (_x1970);
		number_t _x1978 = (_x1944) - (_x1972);
		array_number_t _x1980 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x1980->length=3;
	_x1980->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x1980->arr[0] = _x1856;
	_x1980->arr[1] = _x1916;
	_x1980->arr[2] = _x1976;;
		array_number_t _x1982 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x1982->length=3;
	_x1982->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x1982->arr[0] = _x1858;
	_x1982->arr[1] = _x1918;
	_x1982->arr[2] = _x1978;;
		tuple_number_t_number_t macroDef2370 = _x1539;
	for(int idx = _x1515; idx < _x1513; idx++){
		number_t _x1990 = macroDef2370._1;
		number_t _x1992 = macroDef2370._2;
		number_t _x1995 = cam->arr[idx];
		number_t _x1997 = (_x1995) * (_x1792);
		number_t _x1999 = x->arr[idx];
		index_t _x2001 = (idx) + (3);
		number_t _x2003 = cam->arr[_x2001];
		number_t _x2005 = (_x1999) - (_x2003);
		number_t _x2007 = (_x1997) * (_x2005);
		number_t _x2009 = (_x1990) + (_x2007);
		number_t _x2013 = cam_d->arr[idx];
		number_t _x2018 = (_x2013) * (_x1792);
		number_t _x2019 = (_x1995) * (_x1794);
		number_t _x2017 = (_x2018) + (_x2019);
		number_t _x2023 = x_d->arr[idx];
		number_t _x2029 = cam_d->arr[_x2001];
		number_t _x2033 = (_x2023) - (_x2029);
		number_t _x2036 = (_x2017) * (_x2005);
		number_t _x2037 = (_x1997) * (_x2033);
		number_t _x2035 = (_x2036) + (_x2037);
		number_t _x2039 = (_x1992) + (_x2035);
		tuple_number_t_number_t _x1993 = pair(_x2009, _x2039);
		macroDef2370 = _x1993;;
	}
		tuple_number_t_number_t _x1988 = macroDef2370;
		number_t _x2042 = _x1988._1;
		number_t _x2044 = _x1988._2;
		number_t _x2046 = (1) - (_x1781);
		number_t _x2048 = (0) - (_x1783);
		number_t _x2050 = (_x2042) * (_x2046);
		number_t _x2053 = (_x2044) * (_x2046);
		number_t _x2054 = (_x2042) * (_x2048);
		number_t _x2052 = (_x2053) + (_x2054);
		card_t macroDef2371 = x->length;
		card_t _x2056 = macroDef2371;
		array_number_t macroDef2372 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2372->length=_x2056;
	macroDef2372->arr = (number_t*)storage_alloc(sizeof(number_t) * _x2056);
		for(int i = 0; i < macroDef2372->length; i++){
			number_t _x2059 = x->arr[i];
			number_t _x2061 = x_d->arr[i];
			index_t _x2063 = (i) + (3);
			number_t _x2065 = cam->arr[_x2063];
			number_t _x2067 = cam_d->arr[_x2063];
			number_t _x2069 = (_x2059) - (_x2065);
			number_t _x2071 = (_x2061) - (_x2067);
			number_t _x2074 = (_x2071) * (_x1781);
			number_t _x2075 = (_x2069) * (_x1783);
			number_t _x2073 = (_x2074) + (_x2075);
			number_t _x2077 = _x1980->arr[i];
			number_t _x2079 = _x1982->arr[i];
			number_t _x2082 = (_x2079) * (_x1785);
			number_t _x2083 = (_x2077) * (_x1789);
			number_t _x2081 = (_x2082) + (_x2083);
			number_t _x2085 = (_x2073) + (_x2081);
			number_t _x2087 = cam->arr[i];
			number_t _x2089 = cam_d->arr[i];
			number_t _x2091 = (_x2087) * (_x1792);
			number_t _x2094 = (_x2089) * (_x1792);
			number_t _x2095 = (_x2087) * (_x1794);
			number_t _x2093 = (_x2094) + (_x2095);
			number_t _x2098 = (_x2093) * (_x2050);
			number_t _x2099 = (_x2091) * (_x2052);
			number_t _x2097 = (_x2098) + (_x2099);
			number_t _x2101 = (_x2085) + (_x2097);
			macroDef2372->arr[i] = _x2101;;
		}
		array_number_t _x2057 = macroDef2372;
		_x1773 = _x2057;;
	} else {
		number_t _x2103 = cam->arr[1];
		number_t _x2105 = cam_d->arr[1];
		number_t _x2107 = x->arr[2];
		number_t _x2109 = x_d->arr[2];
		number_t _x2111 = cam->arr[5];
		number_t _x2113 = cam_d->arr[5];
		number_t _x2115 = (_x2107) - (_x2111);
		number_t _x2117 = (_x2109) - (_x2113);
		number_t _x2120 = (_x2105) * (_x2115);
		number_t _x2121 = (_x2103) * (_x2117);
		number_t _x2119 = (_x2120) + (_x2121);
		number_t _x2123 = cam->arr[2];
		number_t _x2125 = cam_d->arr[2];
		number_t _x2127 = x->arr[1];
		number_t _x2129 = x_d->arr[1];
		number_t _x2131 = cam->arr[4];
		number_t _x2133 = cam_d->arr[4];
		number_t _x2135 = (_x2127) - (_x2131);
		number_t _x2137 = (_x2129) - (_x2133);
		number_t _x2140 = (_x2125) * (_x2135);
		number_t _x2141 = (_x2123) * (_x2137);
		number_t _x2139 = (_x2140) + (_x2141);
		number_t _x2143 = (_x2119) - (_x2139);
		number_t _x2149 = x->arr[0];
		number_t _x2151 = x_d->arr[0];
		number_t _x2153 = cam->arr[3];
		number_t _x2155 = cam_d->arr[3];
		number_t _x2157 = (_x2149) - (_x2153);
		number_t _x2159 = (_x2151) - (_x2155);
		number_t _x2162 = (_x2125) * (_x2157);
		number_t _x2163 = (_x2123) * (_x2159);
		number_t _x2161 = (_x2162) + (_x2163);
		number_t _x2165 = cam->arr[0];
		number_t _x2167 = cam_d->arr[0];
		number_t _x2169 = x->arr[2];
		number_t _x2171 = x_d->arr[2];
		number_t _x2177 = (_x2169) - (_x2111);
		number_t _x2179 = (_x2171) - (_x2113);
		number_t _x2182 = (_x2167) * (_x2177);
		number_t _x2183 = (_x2165) * (_x2179);
		number_t _x2181 = (_x2182) + (_x2183);
		number_t _x2185 = (_x2161) - (_x2181);
		number_t _x2191 = x->arr[1];
		number_t _x2193 = x_d->arr[1];
		number_t _x2199 = (_x2191) - (_x2131);
		number_t _x2201 = (_x2193) - (_x2133);
		number_t _x2204 = (_x2167) * (_x2199);
		number_t _x2205 = (_x2165) * (_x2201);
		number_t _x2203 = (_x2204) + (_x2205);
		number_t _x2211 = x->arr[0];
		number_t _x2213 = x_d->arr[0];
		number_t _x2219 = (_x2211) - (_x2153);
		number_t _x2221 = (_x2213) - (_x2155);
		number_t _x2224 = (_x2105) * (_x2219);
		number_t _x2225 = (_x2103) * (_x2221);
		number_t _x2223 = (_x2224) + (_x2225);
		number_t _x2227 = (_x2203) - (_x2223);
		array_number_t _x2229 = (array_number_t)storage_alloc(sizeof(int) * 2);
	_x2229->length=3;
	_x2229->arr = (number_t*)storage_alloc(sizeof(number_t) * 3);
	_x2229->arr[0] = _x2143;
	_x2229->arr[1] = _x2185;
	_x2229->arr[2] = _x2227;;
		card_t macroDef2373 = x->length;
		card_t _x2231 = macroDef2373;
		array_number_t macroDef2374 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2374->length=_x2231;
	macroDef2374->arr = (number_t*)storage_alloc(sizeof(number_t) * _x2231);
		for(int i = 0; i < macroDef2374->length; i++){
			number_t _x2234 = x_d->arr[i];
			index_t _x2236 = (i) + (3);
			number_t _x2238 = cam_d->arr[_x2236];
			number_t _x2240 = (_x2234) - (_x2238);
			number_t _x2242 = _x2229->arr[i];
			number_t _x2244 = (_x2240) + (_x2242);
			macroDef2374->arr[i] = _x2244;;
		}
		array_number_t _x2232 = macroDef2374;
		_x1773 = _x2232;;
	}
	number_t _x2246 = _x1547->arr[2];
	number_t _x2248 = _x1773->arr[2];
	number_t _x2250 = (1) / (_x2246);
	number_t _x2254 = (0) * (_x2246);
	number_t _x2255 = (1) * (_x2248);
	number_t _x2253 = (_x2254) - (_x2255);
	number_t _x2256 = (_x2246) * (_x2246);
	number_t _x2252 = (_x2253) / (_x2256);
	card_t _x2258 = 2;
	tuple_number_t_number_t macroDef2375 = _x1539;
	for(int idx = _x1515; idx < _x2258; idx++){
		number_t _x2264 = macroDef2375._1;
		number_t _x2266 = macroDef2375._2;
		number_t _x2269 = _x1547->arr[idx];
		number_t _x2271 = (_x2269) * (_x2250);
		number_t _x2273 = (_x2271) * (_x2271);
		number_t _x2275 = (_x2264) + (_x2273);
		number_t _x2279 = _x1773->arr[idx];
		number_t _x2284 = (_x2279) * (_x2250);
		number_t _x2285 = (_x2269) * (_x2252);
		number_t _x2283 = (_x2284) + (_x2285);
		number_t _x2288 = (_x2283) * (_x2271);
		number_t _x2289 = (_x2271) * (_x2283);
		number_t _x2287 = (_x2288) + (_x2289);
		number_t _x2291 = (_x2266) + (_x2287);
		tuple_number_t_number_t _x2267 = pair(_x2275, _x2291);
		macroDef2375 = _x2267;;
	}
	tuple_number_t_number_t _x2262 = macroDef2375;
	number_t _x2294 = _x2262._1;
	number_t _x2296 = _x2262._2;
	number_t _x2298 = cam->arr[9];
	number_t _x2300 = cam_d->arr[9];
	number_t _x2302 = (_x2298) * (_x2294);
	number_t _x2305 = (_x2300) * (_x2294);
	number_t _x2306 = (_x2298) * (_x2296);
	number_t _x2304 = (_x2305) + (_x2306);
	number_t _x2308 = (1) + (_x2302);
	number_t _x2310 = (0) + (_x2304);
	number_t _x2312 = cam->arr[10];
	number_t _x2314 = cam_d->arr[10];
	number_t _x2316 = (_x2312) * (_x2294);
	number_t _x2319 = (_x2314) * (_x2294);
	number_t _x2320 = (_x2312) * (_x2296);
	number_t _x2318 = (_x2319) + (_x2320);
	number_t _x2322 = (_x2316) * (_x2294);
	number_t _x2325 = (_x2318) * (_x2294);
	number_t _x2326 = (_x2316) * (_x2296);
	number_t _x2324 = (_x2325) + (_x2326);
	number_t _x2328 = (_x2308) + (_x2322);
	number_t _x2330 = (_x2310) + (_x2324);
	number_t _x2332 = cam->arr[6];
	number_t _x2334 = cam_d->arr[6];
	array_number_t macroDef2376 = (array_number_t)storage_alloc(sizeof(int) * 2);
	macroDef2376->length=_x2258;
	macroDef2376->arr = (number_t*)storage_alloc(sizeof(number_t) * _x2258);
		for(int i = 0; i < macroDef2376->length; i++){
			index_t _x2339 = (i) + (7);
			number_t _x2341 = cam_d->arr[_x2339];
			number_t _x2343 = _x1547->arr[i];
			number_t _x2345 = _x1773->arr[i];
			number_t _x2347 = (_x2343) * (_x2250);
			number_t _x2350 = (_x2345) * (_x2250);
			number_t _x2351 = (_x2343) * (_x2252);
			number_t _x2349 = (_x2350) + (_x2351);
			number_t _x2353 = (_x2347) * (_x2328);
			number_t _x2356 = (_x2349) * (_x2328);
			number_t _x2357 = (_x2347) * (_x2330);
			number_t _x2355 = (_x2356) + (_x2357);
			number_t _x2360 = (_x2355) * (_x2332);
			number_t _x2361 = (_x2353) * (_x2334);
			number_t _x2359 = (_x2360) + (_x2361);
			number_t _x2363 = (_x2341) + (_x2359);
			macroDef2376->arr[i] = _x2363;;
		}
	array_number_t _x2337 = macroDef2376;
	return _x2337;
}

#endif