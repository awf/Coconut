<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>DiffSharp</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:DiffSharp.AD.D.F(System.UInt32)">
<summary>
 Fan-out counter of this D
</summary>
</member>
<member name="P:DiffSharp.AD.D.A(DiffSharp.AD.D)">
<summary>
 Adjoint value of this D
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:DiffSharp.AD.D.T">
<summary>
 Tangent value of this D
</summary>
</member>
<member name="P:DiffSharp.AD.D.P">
<summary>
 Primal value of this D
</summary>
</member>
<member name="">

</member>
<member name="P:DiffSharp.AD.D.F">
<summary>
 Fan-out counter of this D
</summary>
</member>
<member name="P:DiffSharp.AD.D.A">
<summary>
 Adjoint value of this D
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.D">
<summary>
 Numeric type keeping dual numbers for forward mode and adjoints and tapes for reverse mode AD, with nesting capability, using tags to avoid perturbation confusion
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.TraceOp">
<summary>
 Operation types recorded in the evaluation trace
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.reverseProp(DiffSharp.AD.D,DiffSharp.AD.D)">
<summary>
 Propagates the adjoint `v` backwards through the evaluation trace of `d`. The adjoints in the trace are reset before the push.
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.reverseReset(DiffSharp.AD.D)">
<summary>
 Resets the adjoints of all the values in the evaluation trace of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.reversePush(DiffSharp.AD.D,DiffSharp.AD.D)">
<summary>
 Pushes the adjoint `v` backwards through the evaluation trace of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.tuple(DiffSharp.AD.D)">
<summary>
 Get the primal and tangent values of  `d`, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.adjoint(DiffSharp.AD.D)">
<summary>
 Get the adjoint value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.tangent(DiffSharp.AD.D)">
<summary>
 Get the tangent value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.primal(DiffSharp.AD.D)">
<summary>
 Get the primal value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.makeDR(System.UInt32,DiffSharp.AD.D)">
<summary>
 Make DR, with tag `i` and primal value `p`
</summary>
</member>
<member name="M:DiffSharp.AD.DOps.makeDF(System.UInt32,DiffSharp.AD.D,DiffSharp.AD.D)">
<summary>
 Make DF, with tag `i`, primal value `p`, and tangent value `t`
</summary>
</member>
<member name="T:DiffSharp.AD.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.hessianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.hessianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Original value and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.gradhessianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Gradient-vector product (directional derivative) and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.gradhessianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Original value, gradient-vector product (directional derivative), and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.hessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.hessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.gradhessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobianTv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobianTv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Original value and transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobianTv''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[])">
<summary>
 Original value and a function for evaluating the transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`. Of the returned pair, the first is the original value of function `f` at point `x` (the result of the forward pass of the reverse mode AD) and the second is a function (the reverse evaluator) that can compute the transposed Jacobian-vector product many times along many different vectors (performing a new reverse pass of reverse mode AD, with the given vector, without repeating the forward pass).
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D[]},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`    
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.laplacian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.laplacian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.gradv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.gradv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D[],DiffSharp.AD.D},DiffSharp.AD.D[],DiffSharp.AD.D[])">
<summary>
 Original value and gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value and `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`    
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.DiffOps">
<summary>
 Forward and reverse differentiation operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Forward.D">
<summary>
 Dual numeric type with nesting capability, using tags to avoid perturbation confusion
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.hessianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Hessian-vector product of a vector-to-scalar function `f`, at point `x`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.hessianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and Hessian-vector product of a vector-to-scalar function `f`, at point `x`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.gradhessianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Gradient-vector product (directional derivative) and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.gradhessianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value, gradient-vector product (directional derivative), and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.gradhessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.hessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.hessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.jacobianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D}},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.laplacian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point x
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.laplacian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.gradv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.gradv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D},FsAlg.Generic.Vector{DiffSharp.AD.Forward.D})">
<summary>
 Original value and directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value and the `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Forward.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.hessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.hessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.hessianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.hessianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Original value and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.gradhessianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Gradient-vector product (directional derivative) and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.gradhessianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Original value, gradient-vector product (directional derivative), and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.gradhessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.jacobianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[]},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.laplacian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.laplacian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.gradv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.gradv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D[],DiffSharp.AD.Forward.D[])">
<summary>
 Original value and gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value and `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D},DiffSharp.AD.Forward.D)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Forward.DiffOps">
<summary>
 Forward differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DOps.tuple(DiffSharp.AD.Forward.D)">
<summary>
 Get the primal and tangent values of  `d`, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DOps.tangent(DiffSharp.AD.Forward.D)">
<summary>
 Get the tangent value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DOps.primal(DiffSharp.AD.Forward.D)">
<summary>
 Get the primal value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Forward.DOps.makeDF(System.UInt32,DiffSharp.AD.Forward.D,DiffSharp.AD.Forward.D)">
<summary>
 Make DF, with tag `i`, primal value `p`, and tangent value `t`
</summary>
</member>
<member name="T:DiffSharp.AD.Forward.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Reverse.TraceOp">
<summary>
 Operation types recorded in the evaluation trace
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Reverse.D">
<summary>
 Numeric type keeping adjoint values and traces, with nesting capability, using tags to avoid perturbation confusion
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.gradhessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.hessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.hessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.jacobianTv''(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and a function for evaluating the transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`. Of the returned pair, the first is the original value of function `f` at point `x` (the result of the forward pass of the reverse mode AD) and the second is a function (the reverse evaluator) that can compute the transposed Jacobian-vector product many times along many different vectors (performing a new reverse pass of the reverse mode AD, with the given vector, without repeating the forward pass).
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.jacobianTv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.jacobianTv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D}},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.laplacian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point x
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.laplacian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D},FsAlg.Generic.Vector{DiffSharp.AD.Reverse.D})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value and the `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Reverse.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.hessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.hessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.gradhessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.jacobianTv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[])">
<summary>
 Transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.jacobianTv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.jacobianTv''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D[]},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and a function for evaluating the transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`. Of the returned pair, the first is the original value of function `f` at point `x` (the result of the forward pass of the reverse mode AD) and the second is a function (the reverse evaluator) that can compute the transposed Jacobian-vector product many times along many different vectors (performing a new reverse pass of reverse mode AD, with the given vector, without repeating the forward pass).
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.laplacian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.laplacian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`    
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D[],DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`    
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value and `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`    
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D},DiffSharp.AD.Reverse.D)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Reverse.DiffOps">
<summary>
 Reverse differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DOps.reverseProp(DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D)">
<summary>
 Propagates the adjoint `v` backwards through the evaluation trace of `d`. The adjoints in the trace are reset before the push.
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DOps.reverseReset(DiffSharp.AD.Reverse.D)">
<summary>
 Resets the adjoints of all the values in the evaluation trace of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DOps.reversePush(DiffSharp.AD.Reverse.D,DiffSharp.AD.Reverse.D)">
<summary>
 Pushes the adjoint `v` backwards through the evaluation trace of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DOps.primal(DiffSharp.AD.Reverse.D)">
<summary>
 Get the primal value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DOps.adjoint(DiffSharp.AD.Reverse.D)">
<summary>
 Get the adjoint value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Reverse.DOps.makeDR(System.UInt32,DiffSharp.AD.Reverse.D)">
<summary>
 Make DR, with tag `i` and primal value `p`
</summary>
</member>
<member name="T:DiffSharp.AD.Reverse.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Specialized.Forward1.D">
<summary>
 Dual numeric type, keeping primal and tangent values
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.jacobianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.gradv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.gradv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward1.D},DiffSharp.AD.Specialized.Forward1.D},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D,DiffSharp.AD.Specialized.Forward1.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D,DiffSharp.AD.Specialized.Forward1.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Forward1.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.jacobianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[],System.Double[])">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D[]},System.Double[],System.Double[])">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D},System.Double[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.gradv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D},System.Double[],System.Double[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.gradv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D[],DiffSharp.AD.Specialized.Forward1.D},System.Double[],System.Double[])">
<summary>
 Original value and gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D,DiffSharp.AD.Specialized.Forward1.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward1.D,DiffSharp.AD.Specialized.Forward1.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Forward1.DiffOps">
<summary>
 Forward differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DOps.tuple(DiffSharp.AD.Specialized.Forward1.D)">
<summary>
 Get the primal and tangent values of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DOps.tangent(DiffSharp.AD.Specialized.Forward1.D)">
<summary>
 Get the tangent value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DOps.primal(DiffSharp.AD.Specialized.Forward1.D)">
<summary>
 Get the primal value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DOps.makeDP1``1(``0)">
<summary>
 Make active D (i.e. variable of differentiation), with primal value `p` and tangent 1
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DOps.makeDPT``2(``0,``1)">
<summary>
 Make D, with primal value `p` and tangent value `t`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward1.DOps.makeD``1(``0)">
<summary>
 Make D, with primal value `p` and tangent 0
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Forward1.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Specialized.Forward2.D">
<summary>
 Numeric type keeping primal, tangent, and tangent-of-tangent values
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.jacobianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.laplacian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.laplacian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.gradv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.gradv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Forward2.D},DiffSharp.AD.Specialized.Forward2.D},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Forward2.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.jacobianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[],System.Double[])">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D[]},System.Double[],System.Double[])">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.laplacian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D},System.Double[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.laplacian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D},System.Double[])">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D},System.Double[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.gradv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D},System.Double[],System.Double[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.gradv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D[],DiffSharp.AD.Specialized.Forward2.D},System.Double[],System.Double[])">
<summary>
 Original value and gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Forward2.D,DiffSharp.AD.Specialized.Forward2.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Forward2.DiffOps">
<summary>
 Forward2 differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.tupleAll(DiffSharp.AD.Specialized.Forward2.D)">
<summary>
 Get the primal, tangent, and tangent-of-tangent values of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.tuple2(DiffSharp.AD.Specialized.Forward2.D)">
<summary>
 Get the primal and tangent-of-tangent values of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.tuple(DiffSharp.AD.Specialized.Forward2.D)">
<summary>
 Get the primal and tangent values of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.tangent2(DiffSharp.AD.Specialized.Forward2.D)">
<summary>
 Get the tangent-of-tangent value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.tangent(DiffSharp.AD.Specialized.Forward2.D)">
<summary>
 Get the tangent value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.primal(DiffSharp.AD.Specialized.Forward2.D)">
<summary>
 Get the primal value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.makeDP1``1(``0)">
<summary>
 Make active D (i.e. variable of differentiation), with primal value `p`, tangent 1, and tangent-of-tangent 0
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.makeDPTT2``3(``0,``1,``2)">
<summary>
 Make D, with primal value `p`, tangent value `t`, and tangent-of-tangent value `t2`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.makeDPT``2(``0,``1)">
<summary>
 Make D, with primal value `p`, tangent value `t`, and tangent-of-tangent 0
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Forward2.DOps.makeD``1(``0)">
<summary>
 Make D, with primal value `p`, tangent 0, and tangent-of-tangent 0
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Forward2.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Specialized.ForwardG.D">
<summary>
 Numeric type keeping a doublet of primal value and a vector of gradient components
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardG.D},DiffSharp.AD.Specialized.ForwardG.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D,DiffSharp.AD.Specialized.ForwardG.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D,DiffSharp.AD.Specialized.ForwardG.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardG.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D[]},System.Double[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D[],DiffSharp.AD.Specialized.ForwardG.D},System.Double[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D,DiffSharp.AD.Specialized.ForwardG.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardG.D,DiffSharp.AD.Specialized.ForwardG.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardG.DiffOps">
<summary>
 ForwardG differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.tupleG(DiffSharp.AD.Specialized.ForwardG.D)">
<summary>
 Get the primal value and the gradient array of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.tuple(DiffSharp.AD.Specialized.ForwardG.D)">
<summary>
 Get the primal value and the first gradient component of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.tangent(DiffSharp.AD.Specialized.ForwardG.D)">
<summary>
 Get the first gradient component of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.gradient(DiffSharp.AD.Specialized.ForwardG.D)">
<summary>
 Get the gradient array of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.primal(DiffSharp.AD.Specialized.ForwardG.D)">
<summary>
 Get the primal value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.makeDP1Array``1(``0[])">
<summary>
 Make an array of active D, with primal values given in array `x`. For a D with index _i_, the gradient is the unit vector with 1 in the _i_th place.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.makeDP1``1(``0,System.Int32,System.Int32)">
<summary>
 Make active D (i.e. variable of differentiation), with primal value `p`, gradient dimension `m`, the component with index `i` having value 1, and the rest of the components 0
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.makeDPT``1(``0,System.Collections.Generic.IEnumerable{System.Double})">
<summary>
 Make D, with primal value `p` and gradient array `g`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardG.DOps.makeD``1(``0,System.Int32)">
<summary>
 Make D, with primal value `p`, gradient dimension `m`, and all gradient components 0
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardG.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Specialized.ForwardGH.D">
<summary>
 Numeric type keeping a triplet of primal value, a vector of gradient components, and a matrix of Hessian components
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.gradhessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.hessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.hessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.laplacian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.laplacian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardGH.D},DiffSharp.AD.Specialized.ForwardGH.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D,DiffSharp.AD.Specialized.ForwardGH.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D,DiffSharp.AD.Specialized.ForwardGH.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardGH.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.laplacian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.laplacian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.gradhessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.hessian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.hessian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D[]},System.Double[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D[],DiffSharp.AD.Specialized.ForwardGH.D},System.Double[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D,DiffSharp.AD.Specialized.ForwardGH.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardGH.D,DiffSharp.AD.Specialized.ForwardGH.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardGH.DiffOps">
<summary>
 ForwardGH differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.tupleGH(DiffSharp.AD.Specialized.ForwardGH.D)">
<summary>
 Get the primal, the gradient array, and the Hessian 2d array of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.tupleH(DiffSharp.AD.Specialized.ForwardGH.D)">
<summary>
 Get the primal and Hessian 2d array of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.tupleG(DiffSharp.AD.Specialized.ForwardGH.D)">
<summary>
 Get the primal and the gradient array of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.tuple(DiffSharp.AD.Specialized.ForwardGH.D)">
<summary>
 Get the primal and the first gradient component of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.hessian(DiffSharp.AD.Specialized.ForwardGH.D)">
<summary>
 Get the Hessian 2d array of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.gradient(DiffSharp.AD.Specialized.ForwardGH.D)">
<summary>
 Get the gradient array of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.primal(DiffSharp.AD.Specialized.ForwardGH.D)">
<summary>
 Get the primal value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.makeDP1Array``1(``0[])">
<summary>
 Make an array of active D, with primal values given in array `x`. For a D with index _i_, the gradient is the unit vector with 1 in the _i_th place, and the Hessian components are 0.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.makeDP1``1(``0,System.Int32,System.Int32)">
<summary>
 Make active D (i.e. variable of differentiation), with primal value `p`, gradient dimension `m`, the gradient component with index `i` having value 1, the rest of the gradient components 0, and Hessian components 0
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.makeDPT``1(``0,System.Collections.Generic.IEnumerable{System.Double},System.Double[0:,0:])">
<summary>
 Make D, with primal value `p`, gradient array `g`, and Hessian 2d array `h`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardGH.DOps.makeD``1(``0,System.Int32)">
<summary>
 Make D, with primal value `p`, gradient dimension `m`, and all gradient and Hessian components 0
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardGH.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Specialized.ForwardN.D">
<summary>
 Numeric type where the tangent value is another D, forming a lazy chain of higher-order derivatives
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.jacobianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.laplacian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point x
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.laplacian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.gradv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.gradv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.ForwardN.D},DiffSharp.AD.Specialized.ForwardN.D},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value and the `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardN.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.jacobianv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[],System.Double[])">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D[]},System.Double[],System.Double[])">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.laplacian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D},System.Double[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.laplacian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D},System.Double[])">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D},System.Double[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.gradv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D},System.Double[],System.Double[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.gradv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D[],DiffSharp.AD.Specialized.ForwardN.D},System.Double[],System.Double[])">
<summary>
 Original value and gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value and the `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.ForwardN.D,DiffSharp.AD.Specialized.ForwardN.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardN.DiffOps">
<summary>
 ForwardN differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.op_DivideHat(DiffSharp.AD.Specialized.ForwardN.D,System.Int32)">
<summary>
 Custom operator (/^) for differentiation. Usage: `x` /^ `n`, value of the `n`-th order derivative of `x`.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.diffLazy(System.Int32)">
<summary>
 Compute the `n`-th derivative of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.tuple(DiffSharp.AD.Specialized.ForwardN.D)">
<summary>
 Get the primal and tangent value of a D, as a tuple
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.tangent2(DiffSharp.AD.Specialized.ForwardN.D)">
<summary>
 Get the tangent-of-tangent value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.tangent(DiffSharp.AD.Specialized.ForwardN.D)">
<summary>
 Get the tangent value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.primal(DiffSharp.AD.Specialized.ForwardN.D)">
<summary>
 Get the primal value of a D
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.makeDP1``1(``0)">
<summary>
 Make active D (i.e. variable of differentiation), with primal value `p` and tangent 1
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.makeDPT``2(``0,``1)">
<summary>
 Make D, with primal value `p` and tangent value `t`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.ForwardN.DOps.makeD``1(``0)">
<summary>
 Make D, with primal value `p` and tangent 0
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.ForwardN.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Specialized.Reverse1.TraceOp">
<summary>
 Operation types recorded in the evaluation trace
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.AD.Specialized.Reverse1.D">
<summary>
 Numeric type keeping adjoint values and traces, with nesting capability, using tags to avoid perturbation confusion
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.jacobianTv''(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and a function for evaluating the transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`. Of the returned pair, the first is the original value of function `f` at point `x` (the result of the forward pass of the reverse mode AD) and the second is a function (the reverse evaluator) that can compute the transposed Jacobian-vector product many times along many different vectors (performing a new reverse pass of the reverse mode AD, with the given vector, without repeating the forward pass).
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.jacobianTv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.jacobianTv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.Specialized.Reverse1.D},DiffSharp.AD.Specialized.Reverse1.D},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D,DiffSharp.AD.Specialized.Reverse1.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D,DiffSharp.AD.Specialized.Reverse1.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Reverse1.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.jacobianTv(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[],System.Double[])">
<summary>
 Transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.jacobianTv'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[],System.Double[])">
<summary>
 Original value and transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.jacobianTv''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D[]},System.Double[])">
<summary>
 Original value and a function for evaluating the transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`. Of the returned pair, the first is the original value of function `f` at point `x` (the result of the forward pass of the reverse mode AD) and the second is a function (the reverse evaluator) that can compute the transposed Jacobian-vector product many times along many different vectors (performing a new reverse pass of reverse mode AD, with the given vector, without repeating the forward pass).
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`    
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D[],DiffSharp.AD.Specialized.Reverse1.D},System.Double[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`    
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D,DiffSharp.AD.Specialized.Reverse1.D},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.Specialized.Reverse1.D,DiffSharp.AD.Specialized.Reverse1.D},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Reverse1.DiffOps">
<summary>
 Reverse differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DOps.reverseProp(System.Double,DiffSharp.AD.Specialized.Reverse1.D)">
<summary>
 Propagates the adjoint `v` backwards through the evaluation trace of `d`. The adjoints in the trace are reset before the push.
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DOps.reverseReset(DiffSharp.AD.Specialized.Reverse1.D)">
<summary>
 Resets the adjoints of all the values in the evaluation trace of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DOps.reversePush(System.Double,DiffSharp.AD.Specialized.Reverse1.D)">
<summary>
 Pushes the adjoint `v` backwards through the evaluation trace of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DOps.primal(DiffSharp.AD.Specialized.Reverse1.D)">
<summary>
 Get the primal value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DOps.adjoint(DiffSharp.AD.Specialized.Reverse1.D)">
<summary>
 Get the adjoint value of `d`
</summary>
</member>
<member name="M:DiffSharp.AD.Specialized.Reverse1.DOps.makeD(System.Double)">
<summary>
 Make D with primal value `p`
</summary>
</member>
<member name="T:DiffSharp.AD.Specialized.Reverse1.DOps">
<summary>
 D operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.hessianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Hessian-vector product of a vector-to-scalar function `f`, at point `x`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.hessianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and Hessian-vector product of a vector-to-scalar function `f`, at point `x`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.gradhessianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Gradient-vector product (directional derivative) and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.gradhessianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value, gradient-vector product (directional derivative), and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`. Computed using reverse-on-forward mode AD.
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.gradhessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.hessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.hessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobianTv''(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and a function for evaluating the transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`. Of the returned pair, the first is the original value of function `f` at point `x` (the result of the forward pass of the reverse mode AD) and the second is a function (the reverse evaluator) that can compute the transposed Jacobian-vector product many times along many different vectors (performing a new reverse pass of the reverse mode AD, with the given vector, without repeating the forward pass).
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobianTv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobianTv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D}},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.laplacian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point x
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.laplacian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.gradv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.gradv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{DiffSharp.AD.D},DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D},FsAlg.Generic.Vector{DiffSharp.AD.D})">
<summary>
 Original value and directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.diffn(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.diffn'(System.Int32,Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value and the `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.diff2''(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.diff2(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.diff2'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.AD.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{DiffSharp.AD.D,DiffSharp.AD.D},DiffSharp.AD.D)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.AD.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Laplacian(System.Func{System.Double[],System.Double},System.Double[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Laplacian(System.Func{System.Double[],System.Double})">
<summary>
 Laplacian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Jacobianv(System.Func{System.Double[],System.Double[]},System.Double[],System.Double[])">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.JacobianT(System.Func{System.Double[],System.Double[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.JacobianT(System.Func{System.Double[],System.Double[]})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Jacobian(System.Func{System.Double[],System.Double[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Jacobian(System.Func{System.Double[],System.Double[]})">
<summary>
 Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Hessianv(System.Func{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Hessian(System.Func{System.Double[],System.Double},System.Double[])">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Hessian(System.Func{System.Double[],System.Double})">
<summary>
 Hessian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Gradv(System.Func{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Grad(System.Func{System.Double[],System.Double},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Grad(System.Func{System.Double[],System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Div(System.Func{System.Double[],System.Double[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Div(System.Func{System.Double[],System.Double[]})">
<summary>
 Divergence of a vector-to-vector function `f`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Diff2(System.Func{System.Double,System.Double},System.Double)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Diff2(System.Func{System.Double,System.Double})">
<summary>
 Second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Diff(System.Func{System.Double,System.Double},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Diff(System.Func{System.Double,System.Double})">
<summary>
 First derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Curl(System.Func{System.Double[],System.Double[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Interop.Numerical.Curl(System.Func{System.Double[],System.Double[]})">
<summary>
 Curl of a vector-to-vector function `f`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="T:DiffSharp.Interop.Numerical">
<summary>
 Numerical differentiation module
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Tanh(DiffSharp.Interop.D)">
<summary>
 Returns the hyperbolic tangent of the specified angle.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Tan(DiffSharp.Interop.D)">
<summary>
 Returns the tangent of the specified angle.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Sqrt(DiffSharp.Interop.D)">
<summary>
 Returns the square root of a specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Sinh(DiffSharp.Interop.D)">
<summary>
 Returns the hyperbolic sine of the specified angle.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Sin(DiffSharp.Interop.D)">
<summary>
 Returns the sine of the specified angle.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Round(DiffSharp.Interop.D)">
<summary>
 Rounds a value to the nearest integer or to the specified number of fractional digits.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Pow(DiffSharp.Interop.D,DiffSharp.Interop.D)">
<summary>
 Returns a specified number raised to the specified power.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Min(DiffSharp.Interop.D,DiffSharp.Interop.D)">
<summary>
 Returns the smaller of two numbers.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Max(DiffSharp.Interop.D,DiffSharp.Interop.D)">
<summary>
 Returns the larger of two specified numbers.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Log10(DiffSharp.Interop.D)">
<summary>
 Returns the base 10 logarithm of a specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Log(DiffSharp.Interop.D)">
<summary>
 Returns the logarithm of a specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Laplacian(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D},DiffSharp.Interop.D[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Laplacian(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D})">
<summary>
 Laplacian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Jacobianv(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]},DiffSharp.Interop.D[],DiffSharp.Interop.D[])">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.JacobianTv(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]},DiffSharp.Interop.D[],DiffSharp.Interop.D[])">
<summary>
 Transposed Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.JacobianT(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]},DiffSharp.Interop.D[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.JacobianT(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Jacobian(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]},DiffSharp.Interop.D[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Jacobian(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]})">
<summary>
 Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Hessianv(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D},DiffSharp.Interop.D[],DiffSharp.Interop.D[])">
<summary>
 Hessian-vector product of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Hessian(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D},DiffSharp.Interop.D[])">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Hessian(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D})">
<summary>
 Hessian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Gradv(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D},DiffSharp.Interop.D[],DiffSharp.Interop.D[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Grad(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D},DiffSharp.Interop.D[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Grad(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D})">
<summary>
 Gradient of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Floor(DiffSharp.Interop.D)">
<summary>
 Returns the largest integer less than or equal to the specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Exp(DiffSharp.Interop.D)">
<summary>
 Returns e raised to the specified power.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Div(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]},DiffSharp.Interop.D[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Div(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]})">
<summary>
 Divergence of a vector-to-vector function `f`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Diffn(System.Int32,System.Func{DiffSharp.Interop.D,DiffSharp.Interop.D},DiffSharp.Interop.D)">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Diffn(System.Int32,System.Func{DiffSharp.Interop.D,DiffSharp.Interop.D})">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Diff2(System.Func{DiffSharp.Interop.D,DiffSharp.Interop.D},DiffSharp.Interop.D)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Diff2(System.Func{DiffSharp.Interop.D,DiffSharp.Interop.D})">
<summary>
 Second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Diff(System.Func{DiffSharp.Interop.D,DiffSharp.Interop.D},DiffSharp.Interop.D)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Diff(System.Func{DiffSharp.Interop.D,DiffSharp.Interop.D})">
<summary>
 First derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Curl(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]},DiffSharp.Interop.D[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Curl(System.Func{DiffSharp.Interop.D[],DiffSharp.Interop.D[]})">
<summary>
 Curl of a vector-to-vector function `f`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Cosh(DiffSharp.Interop.D)">
<summary>
 Returns the hyperbolic cosine of the specified angle.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Cos(DiffSharp.Interop.D)">
<summary>
 Returns the cosine of the specified angle.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Ceiling(DiffSharp.Interop.D)">
<summary>
 Returns the smallest integer greater than or equal to the specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Atan2(DiffSharp.Interop.D,DiffSharp.Interop.D)">
<summary>
 Returns the angle whose tangent is the quotient of two specified numbers.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Atan(DiffSharp.Interop.D)">
<summary>
 Returns the angle whose tangent is the specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Asin(DiffSharp.Interop.D)">
<summary>
 Returns the angle whose sine is the specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Acos(DiffSharp.Interop.D)">
<summary>
 Returns the angle whose cosine is the specified number.
</summary>
</member>
<member name="M:DiffSharp.Interop.AD.Abs(DiffSharp.Interop.D)">
<summary>
 Returns the absolute value of a specified number.
</summary>
</member>
<member name="T:DiffSharp.Interop.AD">
<summary>
 Nested forward and reverse mode automatic differentiation module
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:DiffSharp.Interop.D.T">
<summary>
 Tangent value of this D
</summary>
</member>
<member name="P:DiffSharp.Interop.D.P">
<summary>
 Primal value of this D
</summary>
</member>
<member name="">

</member>
<member name="P:DiffSharp.Interop.D.A">
<summary>
 Adjoint value of this D
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.Interop.D">
<summary>
 Numeric type keeping dual numbers for forward mode and adjoints and tapes for reverse mode AD, with nesting capability, using tags to avoid perturbation confusion
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.curldiv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.curldiv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.div(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.div'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.curl(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.curl'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.jacobianv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.gradhessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.hessian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.hessian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.jacobian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.jacobian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.jacobianT(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double}},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.laplacian(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.laplacian'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.grad(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.grad'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.gradv(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.gradv'(Microsoft.FSharp.Core.FSharpFunc{FsAlg.Generic.Vector{System.Double},System.Double},FsAlg.Generic.Vector{System.Double},FsAlg.Generic.Vector{System.Double})">
<summary>
 Original value and directional derivative of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.diff2''(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.diff2(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.diff2'(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.diff(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.Vector.diff'(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.Numerical.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.curldiv(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.curldiv'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.div(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.div'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.curl(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.curl'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.jacobianv'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[],System.Collections.Generic.IEnumerable{System.Double})">
<summary>
 Original value and Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.jacobianv(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
<summary>
 Jacobian-vector product of a vector-to-vector function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.jacobian(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.jacobian'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.jacobianT(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.jacobianT'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double[]},System.Double[])">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.laplacian(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.laplacian'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.gradhessianv(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Gradient-vector product (directional derivative) and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.gradhessianv'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Original value, gradient-vector product (directional derivative), and Hessian-vector product of a vector-to-scalar funtion `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.hessianv(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.hessianv'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Original value and Hessian-vector product of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.hessian(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.hessian'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.gradhessian(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.gradhessian'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.grad(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.grad'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[])">
<summary>
 Original value and gradient of a vector-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.diff2''(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.diff2'(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.diff2(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Second derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.gradv'(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Original value and gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.gradv(Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Double},System.Double[],System.Double[])">
<summary>
 Gradient-vector product (directional derivative) of a vector-to-scalar function `f`, at point `x`, along vector `v`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.diff'(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Numerical.DiffOps.diff(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Double)">
<summary>
 First derivative of a scalar-to-scalar function `f`, at point `x`
</summary>
</member>
<member name="T:DiffSharp.Numerical.DiffOps">
<summary>
 Numerical differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.curldiv``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.curldiv'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.div``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.div'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.curl``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.curl'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.gradhessian``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.gradhessian'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.hessian``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Hessian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.hessian'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.jacobian``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.jacobian'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.jacobianT``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.jacobianT'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.laplacian``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Laplacian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.laplacian'``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.grad``1(Microsoft.FSharp.Quotations.FSharpExpr,``0)">
<summary>
 Gradient of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.grad'(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Original value and gradient of a vector-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.diffn(System.Int32,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.diffn'(System.Int32,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value and the `n`-th derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.diff2''(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.diff2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.diff2'(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.diff(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 First derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.Vector.diff'(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="T:DiffSharp.Symbolic.Vector">
<summary>
 Module with differentiation operators using Vector and Matrix input and output, instead of float[] and float[,]
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.curldiv(Microsoft.FSharp.Quotations.FSharpExpr,System.Double[])">
<summary>
 Curl and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.curldiv'(Microsoft.FSharp.Quotations.FSharpExpr,System.Double[])">
<summary>
 Original value, curl, and divergence of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.div(Microsoft.FSharp.Quotations.FSharpExpr,System.Double[])">
<summary>
 Divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.div'(Microsoft.FSharp.Quotations.FSharpExpr,System.Double[])">
<summary>
 Original value and divergence of a vector-to-vector function `f`, at point `x`. Defined only for functions with a square Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.curl(Microsoft.FSharp.Quotations.FSharpExpr,System.Double[])">
<summary>
 Curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.curl'(Microsoft.FSharp.Quotations.FSharpExpr,System.Double[])">
<summary>
 Original value and curl of a vector-to-vector function `f`, at point `x`. Supported only for functions with a three-by-three Jacobian matrix.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.gradhessian(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Gradient and Hessian of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.gradhessian'(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Original value, gradient, and Hessian of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.hessian'(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Original value and Hessian of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.hessian(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Hessian of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.laplacian'(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Original value and Laplacian of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.laplacian(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Laplacian of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.jacobian'(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Original value and Jacobian of a vector-to-vector function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.jacobian(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Jacobian of a vector-to-vector function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.jacobianT'(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Original value and transposed Jacobian of a vector-to-vector function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.jacobianT(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Transposed Jacobian of a vector-to-vector function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.grad'(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Original value and gradient of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.grad(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Gradient of a vector-to-scalar function `f`. Function should have multiple variables in curried form, instead of an array variable as in other parts of the library.
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.diff2''(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value, first derivative, and second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.diff2'(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value and second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.diff2(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Second derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.diffn'(System.Int32,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value and `n`-th derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.diffn(System.Int32,Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 `n`-th derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.diff'(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 Original value and first derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.DiffOps.diff(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}})">
<summary>
 First derivative of a scalar-to-scalar function `f`
</summary>
</member>
<member name="T:DiffSharp.Symbolic.DiffOps">
<summary>
 Symbolic differentiation operations module (automatically opened)
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.evalVV(System.Double[],Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Evaluate vector-to-vector Expr `expr`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.evalVS(System.Double[],Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Evaluate vector-to-scalar Expr `expr`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.evalSS(System.Double,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Evaluate scalar-to-scalar Expr `expr`, at point `x`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.diffExprN(Microsoft.FSharp.Quotations.FSharpVar,System.Int32)">
<summary>
 Compute the `n`-th derivative of an Expr, with respect to Var `v`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.getExprArgs(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Get the arguments of a function given in Expr `expr`, as a Var array
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.expand(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Completely expand Expr `expr`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.simplify(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Simplify Expr `expr`
</summary>
</member>
<member name="M:DiffSharp.Symbolic.ExprOps.diffExpr(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Recursively traverse and differentiate Expr `expr` with respect to Var `v`
</summary>
</member>
<member name="T:DiffSharp.Symbolic.ExprOps">
<summary>
 Symbolic differentiation expression operations module (automatically opened)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.Util.GlobalTagger">
<summary>
 Global tagger for nested D operations
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:DiffSharp.Util.Tagger">
<summary>
 Tagger for generating incremental integers
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:DiffSharp.Util.fVVtoSS``2(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0[],``1[]},``0[])">
<summary>
 Vector-to-vector to scalar-to-scalar function transform. Given a vector-to-vector function `f`, returns a scalar-to-scalar version of `f`, where the `i`-th variable is free and the rest of the variables have the constant values given in `x`, supplying only the `j`-th output.
</summary>
</member>
<member name="M:DiffSharp.Util.fVVtoVS``2(System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0[],``1[]},``0[])">
<summary>
 Vector-to-vector to vector-to-scalar function transform. Given a vector-to-vector function `f`, returns a vector-to-scalar version of `f` supplying only the `i`-th output.
</summary>
</member>
<member name="M:DiffSharp.Util.fVVtoSV``2(System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0[],``1[]},``0[])">
<summary>
 Vector-to-vector to scalar-to-vector function transform. Given a vector-to-vector function `f` and an evaluation point `x`, returns a scalar-to-vector version of `f`, where the `i`-th variable is free and the rest of the variables have the constant values given in `x`.
</summary>
</member>
<member name="M:DiffSharp.Util.fVStoSS``2(System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0[],``1},``0[])">
<summary>
 Vector-to-scalar to scalar-to-scalar function transform. Given a vector-to-scalar function `f` and an evaluation point `x`, returns a scalar-to-scalar version of `f`, where the `i`-th variable is free and the rest of the variables have the constant values given in `x`.
</summary>
</member>
<member name="P:DiffSharp.Util.StepSize">
<summary>
 Global step size for numerical approximations
</summary>
</member>
<member name="P:DiffSharp.Util.log10val">
<summary>
 Value of log 10.
</summary>
</member>
<member name="M:DiffSharp.Util.isHalfway(System.Double)">
<summary>
 Checks whether a float is halfway between two integers
</summary>
</member>
<member name="M:DiffSharp.Util.isInteger(System.Double)">
<summary>
 Checks whether a float contains an integer value
</summary>
</member>
<member name="M:DiffSharp.Util.hash(System.Object[])">
<summary>
 Computes a combined hash code for the objects in array `o`
</summary>
</member>
<member name="M:DiffSharp.Util.matrixSolveHelper``2(``0[0:,0:],``0[])">
<summary>
 Finds an array that, when multiplied by an LU matrix `lu`, gives array `b`
</summary>
</member>
<member name="M:DiffSharp.Util.copyUpperToLower``1(``0[0:,0:])">
<summary>
 Copies the upper triangular elements of the square matrix given in the 2d array `m` to the lower triangular part
</summary>
</member>
<member name="M:DiffSharp.Util.standardBasis``1(System.Int32,System.Int32)">
<summary>
 Gets an array of size `n`, where the `i`-th element is 1 and the rest of the elements are 0
</summary>
</member>
<member name="M:DiffSharp.Util.trace``1(``0[0:,0:])">
<summary>
 Gets the trace of the square matrix given in the 2d array `m`
</summary>
</member>
<member name="M:DiffSharp.Util.diagonal``1(``0[0:,0:])">
<summary>
 Gets an array containing the diagonal elements of the square 2d array `m`
</summary>
</member>
<member name="M:DiffSharp.Util.transpose``1(``0[0:,0:])">
<summary>
 Gets the transpose of the 2d array `m`
</summary>
</member>
<member name="M:DiffSharp.Util.|Square|``1(``0[0:,0:])">
<summary>
 Checks whether the 2d array `m` has the same number of elements in both dimensions
</summary>
</member>
<member name="M:DiffSharp.Util.sndtrd``3(``0,``1,``2)">
<summary>
 Gets the second and third terms of a 3-tuple
</summary>
</member>
<member name="M:DiffSharp.Util.fsttrd``3(``0,``1,``2)">
<summary>
 Gets the first and third terms of a 3-tuple
</summary>
</member>
<member name="M:DiffSharp.Util.trd``3(``0,``1,``2)">
<summary>
 Gets the tail of a 3-tuple
</summary>
</member>
<member name="M:DiffSharp.Util.snd3``3(``0,``1,``2)">
<summary>
 Gets the second term of a 3-tuple
</summary>
</member>
<member name="M:DiffSharp.Util.fst3``3(``0,``1,``2)">
<summary>
 Gets the first term of a 3-tuple
</summary>
</member>
<member name="T:DiffSharp.Util">
<summary>
 Various utility functions used all over the library
</summary>
</member>
</members>
</doc>
